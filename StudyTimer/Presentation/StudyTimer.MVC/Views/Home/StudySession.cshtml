﻿@using StudyTimer.MVC.Models.Home;
@model HomeCreateStudySessionViewModel

@{
    Layout = null; // Layout kullanımını kaldırır
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Study Session</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.1.2/dist/tailwind.min.css" rel="stylesheet">

    <style>


        #rocket-container {
            position: relative;
            width: 100%;
            height: 130px;
            background-color: #000;
            overflow: hidden;
        }

        #rocket {
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            width: 50px;
            height: 50px;
            background-color: rgba(255, 153, 0, 0.2);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #000;
            font-size: 20px;
        }

        .planet {
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            font-size: 30px;
        }

        .planet1 {
            left: 0%;
        }

        .planet2 {
            left: 11%;
        }

        .planet3 {
            left: 30%;
        }

        .planet4 {
            left: 55%;
        }

        .planet5 {
            left: 95%;
        }
    </style>
</head>
<body class="bg-slate-200 text-black h-screen flex flex-col items-center justify-center">
    <!-- Page Content -->
    <div class="flex mt-4 mb-4">
        <!-- Buttons and Content Here -->
        <button id="startButton" onclick="startRocket()" class="bg-blue-900 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mr-2">
            Start
        </button>
        <button id="stopButton" onclick="stopRocket()" class="bg-red-900 hover:bg-red-700 text-white font-bold py-2 px-4 rounded">
            Stop
        </button>
    </div>

    <div class="container mx-auto p-4 bg-black rounded-lg">
        <div id="rocket-container">
            <div class="planet planet4">🌞</div>
            <div class="planet planet2">🌑</div>
            <div class="planet planet3">☄️</div>
            <div class="planet planet5">🪐</div>
            <div class="planet planet1">🌍</div>
            <div id="rocket">🚀</div>
        </div>
    </div>

    <div class="flex mt-4 mb-4">
        <div id="timer" class="text-4xl mt-4 text-black p-4 rounded-lg">Time remaining: 00:00</div>

    </div>


    <script>
        let timerInterval;

        function startRocket() {
            if (!timerInterval) {
                timerInterval = setInterval(() => {
                    if (myTimer.timeRemaining > 0) {
                        myTimer.timeRemaining--;
                        moveRocket();
                    }
                }, 1000);
            }
        }

        function stopRocket() {
            clearInterval(timerInterval);
            timerInterval = null;
        }

        function moveRocket() {
            const rocket = document.getElementById('rocket');
            const completionPercentage = ((myTimer.initialTime - myTimer.timeRemaining) / myTimer.initialTime) * 100;

            rocket.style.left = `${completionPercentage}%`;

            alignWithPlanet(completionPercentage);
            updateTimerDisplay();
        }

        function alignWithPlanet(percentage) {
            const planets = document.querySelectorAll('.planet');

            planets.forEach(planet => {
                const planetPercentage = parseInt(planet.style.left) || 0;

                if (Math.abs(planetPercentage - percentage) < 5) {
                    planet.style.fontSize = '30px'; // Highlight the current planet
                } else {
                    planet.style.fontSize = '24px';
                }
            });
        }

        function updateTimerDisplay() {
            const timerElement = document.getElementById('timer');
            const minutes = Math.floor(myTimer.timeRemaining / 60);
            const seconds = myTimer.timeRemaining % 60;
            const formattedTime = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;

            timerElement.textContent = `Time remaining: ${formattedTime}`;
        }

        function countdownTimer(initialTime) {
            const timer = {
                initialTime: initialTime,
                timeRemaining: initialTime,
            };

            return timer;
        }

        const initialTimeInSeconds = @Model.SelectedTime * 60; // Set the initial countdown time in seconds
        const myTimer = countdownTimer(initialTimeInSeconds);
    </script>
</body>
</html>
